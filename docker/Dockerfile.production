# Tax Sale Compass - Production Docker Configuration
# Optimized multi-stage build for fast deployment

# ==============================================================================
# Stage 1: Python Base Image with System Dependencies
# ==============================================================================
FROM python:3.11-slim as python-base

# Set environment variables for Python optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    pkg-config \
    libffi-dev \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# ==============================================================================
# Stage 2: Backend Dependencies
# ==============================================================================  
FROM python-base as backend-deps

WORKDIR /app/backend

# Copy requirements first for better caching
COPY backend/requirements.txt .

# Install Python dependencies with optimization flags
RUN pip install --no-cache-dir --compile -r requirements.txt

# Install Playwright browsers in separate step for caching
RUN playwright install chromium --with-deps

# ==============================================================================
# Stage 3: Frontend Build (optimized)
# ==============================================================================
FROM node:18-alpine as frontend-build

WORKDIR /app/frontend

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Copy package files first for better layer caching
COPY frontend/package.json frontend/yarn.lock ./

# Install dependencies with optimization
RUN yarn install --frozen-lockfile --network-timeout 300000 --production=false

# Copy frontend configuration files
COPY frontend/tailwind.config.js ./
COPY frontend/postcss.config.js ./
COPY frontend/craco.config.js ./
COPY frontend/jsconfig.json ./
COPY frontend/components.json ./

# Copy source code
COPY frontend/src ./src
COPY frontend/public ./public

# Build arguments for environment
ARG REACT_APP_BACKEND_URL
ARG REACT_APP_GOOGLE_MAPS_API_KEY

# Create production environment file
RUN echo "REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL" > .env && \
    echo "REACT_APP_GOOGLE_MAPS_API_KEY=$REACT_APP_GOOGLE_MAPS_API_KEY" >> .env

# Build frontend with optimizations
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
RUN yarn build

# Remove node_modules to reduce size
RUN rm -rf node_modules

# ==============================================================================
# Stage 4: Production Runtime (optimized)
# ==============================================================================
FROM python:3.11-slim as production

# Create non-root user for security
RUN groupadd -r taxsale && useradd -r -g taxsale taxsale

WORKDIR /app

# Install only essential runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    nginx \
    supervisor \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python dependencies from deps stage
COPY --from=backend-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages  
COPY --from=backend-deps /usr/local/bin /usr/local/bin

# Copy Playwright browsers
COPY --from=backend-deps /root/.cache/ms-playwright /root/.cache/ms-playwright

# Copy backend source (only necessary files)
COPY backend/server.py ./backend/
COPY backend/.env ./backend/
COPY backend/static ./backend/static

# Copy optimized frontend build
COPY --from=frontend-build /app/frontend/build ./frontend/build

# Copy configuration files
COPY docker/nginx.prod.conf /etc/nginx/sites-available/default 2>/dev/null || echo "nginx config not found"
COPY docker/supervisord.prod.conf /etc/supervisor/conf.d/supervisord.conf 2>/dev/null || echo "supervisor config not found"  

# Copy and make scripts executable
COPY scripts ./scripts
RUN find scripts -name "*.sh" -exec chmod +x {} \;

# Create necessary directories with proper permissions
RUN mkdir -p /var/log/taxsale /var/run/taxsale /etc/taxsale /app/data \
    && chown -R taxsale:taxsale /var/log/taxsale /var/run/taxsale /etc/taxsale /app

# Expose ports
EXPOSE 80 443 8001

# Enhanced health check with fallback
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/api/health || curl -f http://localhost:8001/api/health || exit 1

# Optimized environment variables
ENV PYTHONPATH=/app/backend \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    NODE_ENV=production \
    ENVIRONMENT=production

# Use tini as init system for proper signal handling
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]